@echo off

echo Check if Sphinx is already installed
REM Check if Sphinx is already installed
pip show sphinx >nul 2>&1
if %errorlevel% neq 0 (
    echo Sphinx is not installed. Installing Sphinx...
    pip install sphinx
) else (
    echo Sphinx is already installed.
)

REM Get the path of the package
for /f "delims=" %%i in ('pip show sphinx ^| findstr /i "Location"') do set package_path=%%i
set package_path=%package_path:Location=%
echo Sphinx installed at: %package_path%

REM Set the path to Windows environment variables
echo Updating PATH environment variable...
setx PATH "%PATH%;%package_path%"

echo PATH has been updated.

timeout /t 3
:: Initialize Sphinx in Your Project: Navigate to your project directory and run:
::bash
sphinx-quickstart docs

:: Follow the prompts to set up your documentation.

:: Create Sphinx Configuration: 
:: In your conf.py file generated by sphinx-quickstart, 
:: add the following to include your project source directory:

echo python
echo import os
echo import sys
echo sys.path.insert(0, os.path.abspath('.'))  # or correct path to your source directory
echo Generate Documentation: Use autodoc extension to automatically extract docstrings. Add 'sphinx.ext.autodoc' to the extensions list in your conf.py:

echo python
echo extensions = ['sphinx.ext.autodoc']
echo Create API Documentation: Create a .rst file (e.g., api.rst) in your docs folder with the following content:

echo rst
echo .. automodule:: your_module_name
echo    :members:
echo    :undoc-members:
echo    :show-inheritance:
echo Build Documentation: Navigate to your docs directory and run:

echo bash
echo make html
echo This will generate the HTML documentation in the _build/html directory.

echo Conclusion
echo By adding comments and docstrings, and using Sphinx for documentation generation, you make your code more maintainable and accessible to others. Try following these steps and generating your project's documentation!

